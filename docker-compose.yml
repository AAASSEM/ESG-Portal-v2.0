version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: esg_postgres
    environment:
      POSTGRES_DB: esg_portal
      POSTGRES_USER: esg_user
      POSTGRES_PASSWORD: esg_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U esg_user -d esg_portal"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - esg_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: esg_backend
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://esg_user:esg_password@db:5432/esg_portal
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,frontend
      - SECRET_KEY=docker-secret-key-change-in-production
    volumes:
      - ./backend:/app
      - backend_media:/app/media
      - backend_static:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/auth/csrf/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - esg_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: esg_frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - frontend_static:/usr/share/nginx/html/static
    networks:
      - esg_network

  # Redis (for future caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: esg_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - esg_network

# Networks
networks:
  esg_network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  backend_media:
    driver: local
  backend_static:
    driver: local
  frontend_static:
    driver: local
  redis_data:
    driver: local