How the System Handles CORS (Cross-Origin Resource Sharing)

  1. Backend CORS Configuration (settings.py)

  CORS Package Installation (line 64):

  INSTALLED_APPS = [
      'django.contrib.admin',
      # ... other apps
      'rest_framework',
      'corsheaders',    # ← Django CORS headers package
      'core',
  ]

  CORS Middleware Configuration (line 69):

  MIDDLEWARE = [
      'corsheaders.middleware.CorsMiddleware',    # ← Must be first middleware
      'django.middleware.security.SecurityMiddleware',
      'whitenoise.middleware.WhiteNoiseMiddleware',
      'django.contrib.sessions.middleware.SessionMiddleware',
      'django.middleware.common.CommonMiddleware',
      # ... other middleware
  ]

  CORS Allowed Origins (lines 298-315):

  CORS_ALLOWED_ORIGINS = [
      # Development - React frontend
      "http://localhost:3000",
      "http://localhost:3001",
      "http://localhost:3002",
      "http://localhost:3003",
      "http://localhost:7701",    # Previous frontend port
      "http://127.0.0.1:3000",
      "http://127.0.0.1:3001",
      "http://127.0.0.1:3002",
      "http://127.0.0.1:3003",
      "http://127.0.0.1:7701",

      # Development - Django backend
      "http://localhost:8000",
      "http://127.0.0.1:8000",
      "http://localhost:8080",
      "http://127.0.0.1:8080",

      # Production - Vercel
      "https://esg-portal-v2-0-v5jv-qy71s8853-aaassems-projects.vercel.app",
  ]

  Dynamic Production URLs (lines 317-322):

  # Add Render URLs to CORS if in production
  if os.environ.get('RENDER_EXTERNAL_HOSTNAME'):
      CORS_ALLOWED_ORIGINS.extend([
          f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}",
          f"http://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}",
      ])

  CORS Origin Regex Patterns (lines 325-334):

  CORS_ALLOWED_ORIGIN_REGEXES = [
      r"^https://.*\.onrender\.com$",      # Render deployments
      r"^http://.*\.onrender\.com$",       # Render HTTP (dev)
      r"^https://.*\.ngrok-free\.app$",    # ngrok tunneling
      r"^https://.*\.ngrok\.io$",
      r"^https://.*\.ngrok\.app$",
      r"^https://.*\.ngrok\.dev$",
      r"^https://.*\.vercel\.app$",        # Vercel deployments
      r"^https://.*\.vercel\.com$",        # Vercel custom domains
  ]

  CORS Credentials and Headers (lines 336-348):

  CORS_ALLOW_CREDENTIALS = True          # ← Allow cookies/sessions
  CORS_ALLOW_ALL_ORIGINS = True          # ← Temporary debug setting
  CORS_ALLOWED_HEADERS = [
      'accept',
      'accept-encoding',
      'authorization',
      'content-type',
      'dnt',
      'origin',
      'user-agent',
      'x-csrftoken',                      # ← CSRF token header
      'x-requested-with',
  ]

  CSRF Trusted Origins (lines 354-374):

  CSRF_TRUSTED_ORIGINS = [
      # Development
      'http://localhost:8000',
      'http://127.0.0.1:8000',
      'http://localhost:8080',
      'http://127.0.0.1:8080',
      'http://localhost:3000',
      'http://localhost:3001',
      'http://localhost:3002',
      'http://localhost:3003',
      'http://127.0.0.1:3003',
      'http://localhost:7701',
      'http://127.0.0.1:7701',
      'http://localhost:7702',
      'http://127.0.0.1:7702',

      # Production patterns
      'https://*.onrender.com',
      'http://*.onrender.com',
      'https://*.ngrok-free.app',
      'https://*.ngrok.io',
      'https://*.ngrok.app',
      'https://*.ngrok.dev',
  ]

  2. Frontend CORS Interaction

  Universal Credentials Inclusion:

  Fetch API (AuthContext.js examples):

  // All requests include credentials for session cookies
  const response = await fetch(`${API_BASE_URL}/api/auth/login/`, {
    method: 'POST',
    credentials: 'include',    // ← Sends cookies/sessions across origins
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(requestBody)
  });

  Axios Requests (LocationContext.js examples):

  // Axios configured with credentials
  const response = await axios.get(`${API_BASE_URL}/api/sites/active/`, {
    withCredentials: true      // ← Axios equivalent of credentials: 'include'
  });

  Authenticated Request Helper (AuthContext.js:69-75):

  // Centralized authenticated request function
  const makeAuthenticatedRequest = async (url, options = {}) => {
    const headers = {
      'Content-Type': 'application/json',
      'X-CSRFToken': await getCsrfToken(),    // CSRF protection
      ...options.headers,
    };

    const response = await fetch(finalUrl, {
      credentials: 'include',                  // Always include credentials
      ...options,
      headers,
    });

    return response;
  };

  CSRF Token Management (AuthContext.js:15-35):

  // CSRF token fetching for secure requests
  const getCsrfToken = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/csrf/`, {
        method: 'GET',
        credentials: 'include',    // Include cookies to get CSRF token
      });

      if (response.ok) {
        const data = await response.json();
        return data.csrfToken;
      }
    } catch (error) {
      console.error('Error fetching CSRF token:', error);
    }
    return null;
  };

  3. CORS Security Implementation

  Session-Based Authentication:

  - Backend: Uses Django sessions stored in cookies
  - Frontend: Includes cookies in all requests via credentials: 'include'
  - CORS: CORS_ALLOW_CREDENTIALS = True permits credential sharing

  CSRF Protection:

  - Token Generation: Backend provides CSRF tokens via /api/auth/csrf/
  - Token Inclusion: Frontend includes X-CSRFToken header in requests
  - Validation: Django validates tokens for state-changing operations

  Origin Validation:

  # Multiple layers of origin validation:

  1. CORS_ALLOWED_ORIGINS: Explicit URL allowlist
  2. CORS_ALLOWED_ORIGIN_REGEXES: Pattern matching for dynamic subdomains
  3. CSRF_TRUSTED_ORIGINS: Additional CSRF-specific origins
  4. Environment-based: Dynamic addition based on deployment environment

  4. Development vs Production Handling

  Development Configuration:

  # Permissive settings for local development
  CORS_ALLOW_ALL_ORIGINS = True           # Temporary - allows any origin
  ALLOWED_HOSTS = [
      'localhost', '127.0.0.1', '0.0.0.0'  # Local development hosts
  ]

  Production Configuration:

  # Dynamic configuration based on environment
  if os.environ.get('RENDER_EXTERNAL_HOSTNAME'):
      ALLOWED_HOSTS.append(os.environ.get('RENDER_EXTERNAL_HOSTNAME'))
      CORS_ALLOWED_ORIGINS.extend([...])
      CSRF_TRUSTED_ORIGINS.append(f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}")

  Multi-Platform Support:

  - Render: Dynamic hostname detection
  - Vercel: Explicit URL inclusion
  - ngrok: Regex patterns for tunneling
  - Local: Multiple port configurations

  5. CORS Error Handling

  Common CORS Issues Addressed:

  Preflight Requests:

  # CORS middleware automatically handles OPTIONS preflight requests
  CORS_ALLOWED_HEADERS = [
      'content-type',      # For JSON requests
      'x-csrftoken',      # For CSRF protection
      'authorization',     # For future token auth
      'x-requested-with',  # AJAX detection
  ]

  Credential Requirements:

  // Frontend consistently includes credentials
  credentials: 'include'        // fetch API
  withCredentials: true         // Axios

  Mixed Content Prevention:

  # Production enforces HTTPS
  SESSION_COOKIE_SECURE = True        # HTTPS-only cookies
  CSRF_COOKIE_SECURE = True          # HTTPS-only CSRF tokens

  6. CORS Flow Summary

  Typical Request Flow:

  1. Frontend makes request to http://localhost:3000 → http://localhost:8080/api/
  2. Browser sends preflight OPTIONS request (if needed)
  3. Django CORS Middleware checks origin against allowed list
  4. Response Headers include appropriate CORS headers:
  Access-Control-Allow-Origin: http://localhost:3000
  Access-Control-Allow-Credentials: true
  Access-Control-Allow-Headers: content-type, x-csrftoken, ...
  5. Browser permits the actual request
  6. Session Authentication works via cookies
  7. CSRF Protection validates via X-CSRFToken header

  Security Benefits:

  - Origin Validation: Only approved frontends can access the API
  - Credential Protection: Session cookies only sent to trusted origins
  - CSRF Prevention: State-changing requests require valid CSRF tokens
  - Production Security: HTTPS enforcement and secure cookie settings

  Development Flexibility:

  - Multiple Ports: Supports various development server configurations
  - Tunneling Support: Works with ngrok and similar tools
  - Debug Mode: Temporary permissive settings for troubleshooting

  The system uses a comprehensive CORS configuration that balances security with development flexibility, supporting multiple deployment
  platforms while maintaining proper cross-origin protection.
