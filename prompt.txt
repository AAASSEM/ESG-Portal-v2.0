 How Email Sending Works Locally vs Production       

  1. Email Backend Configuration (settings.py:168-207)

  Environment-Based Email Backend Selection:

  # Email Configuration
  USE_REAL_EMAIL = os.environ.get('USE_REAL_EMAIL', 'False').lower() == 'true'
  EMAIL_SERVICE = os.environ.get('EMAIL_SERVICE', 'console')  # console, smtp, sendgrid

  if USE_REAL_EMAIL:
      if EMAIL_SERVICE == 'sendgrid':
          # Production: SendGrid API email sending (recommended)
          EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
          EMAIL_HOST = 'smtp.sendgrid.net'
          EMAIL_PORT = 587
          EMAIL_USE_TLS = True
          EMAIL_HOST_USER = 'apikey'  # Literally 'apikey' for SendGrid
          EMAIL_HOST_PASSWORD = os.environ.get('SENDGRID_API_KEY')
      else:
          # Alternative: SMTP email sending (Gmail, etc.)
          EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
          EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
          EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
          EMAIL_USE_TLS = True
          EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
          EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
  else:
      # Development: Print emails to console
      EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

  Email Settings:

  DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@esgportal.com')
  EMAIL_SUBJECT_PREFIX = '[ESG Portal] '
  EMAIL_VERIFICATION_TOKEN_EXPIRE_HOURS = 24

  # Frontend URL for email links
  FRONTEND_URL = os.environ.get('FRONTEND_URL',
      'https://esg-portal.onrender.com' if not DEBUG else 'http://localhost:3001')

  # Backend URL for magic links (API endpoint, not frontend)
  BACKEND_URL = os.environ.get('BACKEND_URL',
      'https://esg-portal.onrender.com' if not DEBUG else 'http://localhost:8080')

  2. Email Sending Implementation

  Core Email Service (email_service.py:133-140):

  send_result = send_mail(
      subject=subject,
      message=plain_message,
      from_email=settings.DEFAULT_FROM_EMAIL,
      recipient_list=[recipient_email],
      html_message=html_message,
      fail_silently=False,
  )

  # Check if email was actually sent
  if send_result == 1:
      email_sent = True
      print(f"✅ Email sent successfully to {recipient_email}")
  else:
      print(f"❌ Email send failed (result={send_result})")

  Signal-Based Email Triggers (signals.py:27-68, 73-221):

  # User creation signal - triggers invitation emails
  @receiver(post_save, sender=User)
  def send_user_creation_email(sender, instance, created, **kwargs):
      if created and instance.email:
          def send_user_email():
              has_password = instance.has_usable_password()

              if has_password:
                  # Self-signup: Send email verification
                  token_obj = EmailVerificationToken.objects.create(
                      user=instance,
                      token_type='email_verification'
                  )
              else:
                  # Admin-created: Send invitation email
                  token_obj = EmailVerificationToken.objects.create(
                      user=instance,
                      token_type='invitation'
                  )

          # Send after database transaction commits
          transaction.on_commit(send_user_email)

  # Token creation signal - sends the actual emails
  @receiver(post_save, sender=EmailVerificationToken)
  def send_email_after_token_creation(sender, instance, created, **kwargs):
      if created and instance.user.email:
          def send_token_email():
              if instance.token_type == 'password_reset':
                  # Send password reset with 6-digit code
                  send_mail(...)
              elif instance.token_type == 'email_verification':
                  # Send email verification with magic link
                  send_mail(...)
              elif instance.token_type == 'invitation':
                  # Send invitation with magic link
                  send_mail(...)

          transaction.on_commit(send_token_email)

  3. Local Development Email Handling

  Console Backend (when USE_REAL_EMAIL=False):

  EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

  How it works:
  - No actual emails sent - emails are printed to console/terminal
  - Development debugging - see exact email content and formatting
  - No external dependencies - no SMTP server or API keys needed
  - Instant feedback - emails appear immediately in Django console

  Example Console Output:
  Content-Type: text/plain; charset="utf-8"
  MIME-Version: 1.0
  Content-Transfer-Encoding: 8bit
  Subject: [ESG Portal] You've been invited to ESG Portal
  From: noreply@esgportal.com
  To: user@example.com
  Date: Thu, 26 Sep 2025 10:30:00 -0000
  Message-ID: <...>

  Welcome to ESG Portal, John!

  You've been invited to join ESG Portal as a Site Manager.

  Click the magic link below to access your account:
  http://localhost:8080/api/auth/magic-link/abc123def456ghi789jkl/

  This invitation link will expire in 7 days.

  Local Email Testing Options:

  1. Console Backend (default): Print to terminal
  2. File Backend: Save emails as files
  3. Dummy Backend: Discard emails silently
  4. SMTP Backend: Use local SMTP server (mailcatcher, etc.)

  4. Production Email Handling

  SendGrid Configuration (Production Recommended):

  # Environment variables needed in production:
  USE_REAL_EMAIL=true
  EMAIL_SERVICE=sendgrid
  SENDGRID_API_KEY=SG.your_sendgrid_api_key_here
  DEFAULT_FROM_EMAIL=noreply@yourdomain.com

  SendGrid Setup:
  EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
  EMAIL_HOST = 'smtp.sendgrid.net'
  EMAIL_PORT = 587
  EMAIL_USE_TLS = True
  EMAIL_HOST_USER = 'apikey'  # Literally 'apikey'
  EMAIL_HOST_PASSWORD = os.environ.get('SENDGRID_API_KEY')

  Alternative SMTP Configuration:

  # Environment variables for Gmail/custom SMTP:
  USE_REAL_EMAIL=true
  EMAIL_SERVICE=smtp
  EMAIL_HOST=smtp.gmail.com
  EMAIL_PORT=587
  EMAIL_HOST_USER=your-email@gmail.com
  EMAIL_HOST_PASSWORD=your-app-password

  5. Email Types and Templates

  Email Templates Structure (/backend/templates/emails/):

  templates/emails/
  ├── email_verification.html        # Legacy email verification
  ├── email_verification_magic.html  # Magic link email verification  
  ├── password_reset.html            # Password reset with 6-digit code
  ├── invitation.html                # User invitation magic link
  └── corresponding .txt files       # Plain text versions

  Email Types and Content:

  1. Invitation Email (invitation.html):

  - Trigger: Admin creates user without password
  - Content: Magic link for account setup
  - URL: {BACKEND_URL}/api/auth/magic-link/{token}/
  - Expiry: 7 days
  - Template Variables: user_name, invitation_url, site_name, role

  2. Email Verification (email_verification_magic.html):

  - Trigger: Self-signup with email
  - Content: Magic link for email verification
  - URL: Same magic link endpoint
  - Expiry: 24 hours
  - Template Variables: user_name, verification_url, site_name

  3. Password Reset (password_reset.html):

  - Trigger: User requests password reset
  - Content: 6-digit verification code
  - Method: Code entry in frontend form
  - Expiry: 1 hour
  - Template Variables: user_name, verification_code, site_name

  Magic Link URLs:

  # Development
  magic_link_url = f"http://localhost:8080/api/auth/magic-link/{token}/"

  # Production  
  magic_link_url = f"https://esg-portal.onrender.com/api/auth/magic-link/{token}/"

  6. Privacy Protection with SimpleLogin

  Email Address Resolution (email_service.py:26-58):

  def get_user_email_address(user):
      """
      Get email address for sending - uses SimpleLogin alias if available
      """
      if not getattr(settings, 'SIMPLELOGIN_API_KEY', None):
          return user.email  # Direct email if no SimpleLogin

      try:
          # Try to get SimpleLogin alias
          alias_info = simplelogin.get_user_alias(user.email)
          if alias_info and alias_info.get('alias'):
              logger.info(f"Using SimpleLogin alias for {user.email}")
              return alias_info['alias']
      except Exception as e:
          logger.error(f"SimpleLogin error: {str(e)}, using direct email")

      return user.email  # Fallback to direct email

  SimpleLogin Integration:

  - Purpose: Privacy protection for user email addresses
  - Functionality: Creates alias emails that forward to user's real email
  - Configuration: SIMPLELOGIN_API_KEY environment variable
  - Fallback: Uses direct email if SimpleLogin unavailable

  7. Email Delivery Flow

  Complete Email Sending Process:

  1. Trigger Event: User creation, password reset request, etc.
  2. Signal Handler: Django signal creates EmailVerificationToken
  3. Token Creation: Generates unique token with expiry
  4. Email Assembly:
    - Template rendering with context variables
    - HTML and plain text versions
    - Subject line with prefix
  5. Address Resolution: SimpleLogin alias or direct email
  6. Backend Selection: Console (dev) or SMTP/SendGrid (prod)
  7. Email Dispatch: send_mail() function call
  8. Delivery Confirmation: Check return value (1 = success)
  9. Error Handling: Log failures, continue gracefully

  Development vs Production Comparison:

  | Aspect                | Local Development            | Production                   |
  |-----------------------|------------------------------|------------------------------|
  | Backend               | Console (prints to terminal) | SendGrid/SMTP (real sending) |
  | API Keys              | Not required                 | SENDGRID_API_KEY required    |
  | Email Delivery        | Immediate console output     | Actual email delivery        |
  | Testing               | View email content instantly | Need real email account      |
  | External Dependencies | None                         | SendGrid account/SMTP server |
  | URLs in emails        | localhost:8080               | esg-portal.onrender.com      |
  | From Address          | noreply@esgportal.com        | Configured domain email      |
  | Privacy Protection    | Optional SimpleLogin         | Same SimpleLogin integration |

  Production Environment Variables Required:

  USE_REAL_EMAIL=true
  EMAIL_SERVICE=sendgrid
  SENDGRID_API_KEY=SG.your_api_key_here
  DEFAULT_FROM_EMAIL=noreply@yourdomain.com
  FRONTEND_URL=https://your-frontend.onrender.com
  BACKEND_URL=https://your-backend.onrender.com
  SIMPLELOGIN_API_KEY=optional_privacy_key

  The system provides a robust email infrastructure that seamlessly transitions from development (console output) to production (real email        
  delivery) through environment variable configuration, with comprehensive template support and privacy protection features.
