Excellent catch! Looking at column F (Frameworks), the elements are tagged with different framework requirements that should control their activation. Here's how to prompt this:

---

## Framework-Based Activation Logic for Claude Code:

The system should NOT activate all 80 elements for every company. Elements should be activated based on **framework requirements (column F)** AND **conditional logic (column L)**.

### Framework Codes in Column F:
- **E** = ESG Framework (Mandatory for all)
- **D** = Dubai Sustainable Tourism/DST (Only for Dubai-based companies)  
- **G** = Green Key Certification (Voluntary/Optional)

### Framework Distribution from Excel:
- **"E, D, G"**: 3 elements (required for all frameworks)
- **"E, D"**: 7 elements (ESG + Dubai only)
- **"E, G"**: 1 element (ESG + Green Key only)
- **"D, G"**: 3 elements (Dubai + Green Key only)
- **"E"**: 27 elements (ESG only)
- **"D"**: 17 elements (Dubai only)
- **"G"**: 22 elements (Green Key only)

### Activation Rules:

```python
def should_activate_element(element, company):
    # Parse frameworks from column F
    frameworks = element.frameworks.split(',')  # e.g., "E, D, G" -> ["E", "D", "G"]
    frameworks = [f.strip() for f in frameworks]
    
    # Check framework requirements
    has_required_framework = False
    
    # E - Mandatory ESG (all companies have this)
    if 'E' in frameworks:
        has_required_framework = True
    
    # D - Dubai Sustainable Tourism (location-based)
    if 'D' in frameworks:
        if company.location == 'Dubai' or company.country == 'UAE':
            has_required_framework = True
        else:
            # If D is required but company not in Dubai, skip this element
            if 'E' not in frameworks:  # Unless E is also present
                return False
    
    # G - Green Key (optional certification)
    if 'G' in frameworks:
        if company.has_green_key_certification:
            has_required_framework = True
        elif 'E' not in frameworks and 'D' not in frameworks:
            # If ONLY G and company doesn't have Green Key, skip
            return False
    
    # If element has required framework, check must-have vs conditional
    if has_required_framework:
        if element.requirement_type == 'must-have':
            return True
        elif element.requirement_type == 'conditional':
            # Check condition_logic (column L)
            return check_condition_met(element.condition_logic, company.profile_answers)
    
    return False
```

### Company Onboarding Flow:

```python
# Step 1: Determine company frameworks
company_frameworks = ['E']  # All companies get ESG

if company.location in ['Dubai', 'UAE']:
    company_frameworks.append('D')

# Step 2: Ask about optional certification
green_key_question = "Is your company pursuing or certified with Green Key?"
if answer == 'Yes':
    company_frameworks.append('G')

# Step 3: Filter profiling questions
# Only show questions for conditional elements in active frameworks
relevant_conditions = []
for element in all_elements:
    if element_matches_company_frameworks(element, company_frameworks):
        if element.requirement_type == 'conditional' and element.condition_logic:
            relevant_conditions.append(element.condition_logic)

# Show only unique conditions as questions
unique_questions = generate_questions_from_conditions(set(relevant_conditions))
```

### Expected Behavior by Location:

**For a company NOT in Dubai, WITHOUT Green Key:**
- Gets only "E" framework elements
- Approximately 30-35 elements (27 E-only + some from "E, D, G" and "E, D" where E is included)
- Shows fewer profiling questions (only conditions for E elements)

**For a company in Dubai, WITHOUT Green Key:**
- Gets "E" and "D" framework elements  
- Approximately 55-60 elements
- Shows profiling questions for E and D conditional elements

**For a company in Dubai WITH Green Key:**
- Gets all "E", "D", and "G" framework elements
- All 80 elements available (but still conditional on profiling answers)
- Shows all 22 conditional element questions

### Implementation Update:

```python
# DataElement model should include:
frameworks = models.CharField(max_length=20)  # Store as "E, D, G"

# Company model should track:
location = models.CharField(max_length=100)
has_green_key = models.BooleanField(default=False)
active_frameworks = models.JSONField(default=list)  # ["E", "D", "G"]

# Element filtering:
def get_available_elements(company):
    all_elements = DataElement.objects.all()
    available = []
    
    for element in all_elements:
        element_frameworks = [f.strip() for f in element.frameworks.split(',')]
        
        # Check if element's frameworks intersect with company's frameworks
        if any(f in company.active_frameworks for f in element_frameworks):
            available.append(element)
    
    return available
```

### Profiling Question Generation:

```python
def get_profiling_questions(company):
    # Get only elements matching company's frameworks
    available_elements = get_available_elements(company)
    
    # Extract conditions only from available conditional elements
    conditions = []
    for element in available_elements:
        if element.requirement_type == 'conditional' and element.condition_logic:
            conditions.append({
                'condition': element.condition_logic,
                'element_id': element.master_id
            })
    
    # Generate questions from unique conditions
    # This should generate ~5-10 questions for E-only companies
    # Up to ~15 for Dubai companies  
    # Up to ~22 for Dubai + Green Key companies
    return create_questions_from_conditions(conditions)
```

This ensures:
1. Companies only see relevant elements for their location/certification
2. Profiling questions are filtered to relevant conditional elements
3. The system scales based on company context rather than showing all 80 elements to everyone

---

This framework-based approach means the system should be much more targeted and efficient, only tracking what's relevant for each company's regulatory and voluntary requirements.