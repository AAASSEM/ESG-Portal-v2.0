I need to optimize the annual progress calculation in my Django ESG application. The issue is in services.py in the calculate_progress_original method.

PROBLEM:
The annual progress API call takes 4.5 seconds because it's calling get_data_collection_tasks() 12 times sequentially (once for each month) just to ensure tasks exist. This is unnecessary since tasks are created on-demand when users navigate to each month.

SOLUTION NEEDED:
Remove the expensive 12-month loop from the calculate_progress_original method. Specifically:

1. In services.py, find the calculate_progress_original method
2. In the else block (for yearly progress), remove these lines:
```python
   # For yearly progress, ensure all tasks are created for all 12 months
   for month_num in range(1, 13):
       tasks = DataCollectionService.get_data_collection_tasks(company, year, month_num, user=user)
```

3. Replace with a simple comment explaining the change:
```python
   # For yearly progress: just fetch ALL existing submissions
   # No need to create tasks for all months - they'll be created on-demand when users visit each month
```

4. Keep the monthly progress logic (if month:) unchanged - it should still create tasks for the specific month

EXPECTED OUTCOME:
- Annual progress API should drop from 4.5 seconds to under 500ms
- Monthly progress should continue working as before
- Tasks will still be created on-demand when users navigate to specific months

FILES TO MODIFY:
- services.py: DataCollectionService.calculate_progress_original method

Please make this change and confirm the optimization is complete.